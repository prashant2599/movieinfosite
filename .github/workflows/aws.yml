# name: Terraform CI/CD

# on:
#   push:
#     branches:
#       - main
#   # pull_request:
#   #   branches:
#   #     - main

# jobs:
#   terraform:
#     name: Terraform Workflow
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0 

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
#           aws-region: ap-south-1  # Specify your AWS regio

#       - name: Terraform Init
#         run: terraform init
#         working-directory: devops/infra/


#       - name: Terraform Plan
#         run: terraform plan -out=plan.out
#         working-directory: devops/infra/

 

#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve plan.out
#         working-directory: devops/infra/
#       - name: Terraform Destroy
#         if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
#         run: terraform destroy -auto-approve
# #  docker:
# #     name: Build and Push Docker Image to ECR
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout Code
# #         uses: actions/checkout@v3

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v2
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
# #           aws-region: ap-south-1  # Specify your AWS region

# #       - name: Log in to Amazon ECR
# #         run: |
# #           aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }}

# #       - name: Build Docker Image
# #         id: build-image
# #         run: docker build -t movieinfosite:${{ github.run_number }} . 
        
# #       - name: Tag Docker Image
# #         run: docker tag movieinfosite:${{ github.run_number }} ${{ secrets.ECR_REPO_URI }}/movieinfosite:${{ github.run_number }}

# #       - name: Push Docker Image to ECR
# #         id: push-image
# #         run: |
# #           docker push ${{ secrets.ECR_REPO_URI }}/movieinfosite:${{ github.run_number }}
# #           echo "image=${{ secrets.ECR_REPO_URI }}/movieinfosite:${{ github.run_number }}" >> $GITHUB_ENV

# #       - name: Fill in the new image ID in the Amazon ECS task definition
# #         id: task-def
# #         uses: aws-actions/amazon-ecs-render-task-definition@v1
# #         with:
# #           task-definition: task-def.json
# #           container-name: movieinfosite
# #           image: ${{ env.image }}

# #       - name: Deploy Amazon ECS task definition
# #         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
# #         with:
# #           task-definition: ${{ steps.task-def.outputs.task-definition }}
# #           service: movieinfosite
# #           cluster: movieinfosite
# #           wait-for-service-stability: true


name: Python CI/CD-HELM

on:
  push:
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  checkout-and-run:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3